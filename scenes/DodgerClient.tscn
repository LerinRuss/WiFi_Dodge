[gd_scene load_steps=3 format=3 uid="uid://mcmvfn4f204l"]

[ext_resource type="Script" path="res://nodes/standalone/ServerListener.gd" id="1_2q5lg"]

[sub_resource type="GDScript" id="GDScript_l7bq3"]
script/source = "# REFACTOR it to remove it from tree and use it as utility class (withour _ready() method and 
# Node inheritancy)
extends Node


func _ready():
	multiplayer.connected_to_server.connect(_on_connected_to_server)
	multiplayer.connection_failed.connect(_on_connection_failed)
	multiplayer.server_disconnected.connect(_on_server_disconnected)
	
	multiplayer.peer_connected.connect(_on_client_connected)
	multiplayer.peer_disconnected.connect(_on_client_disconnected)

func _on_connected_to_server():
	$ServerListener.free()

func _on_connection_failed():
	pass

func _on_server_disconnected():
	pass

func _on_client_connected(id: int):
	pass

func _on_client_disconnected(id: int):
	pass


func _on_server_listener_new_server(server):
	assert(server.sender_ip != null)
	assert(server.received_data != null 
		and server.received_data.has(\"port\")
		and server.received_data.size() == 1)
	
	print('DodgerClient. Received Data: '  + str(server.received_data))
	print('DodgerClient. Sender IP: ' + str(server.sender_ip))
	
	var peer = ENetMultiplayerPeer.new()
	var error = peer.create_client(server.sender_ip, server.received_data[\"port\"])
	
	assert(!error)
	multiplayer.multiplayer_peer = peer

func _on_server_listener_server_decayed(server):
	pass # Replace with function body.
"

[node name="DodgerClient" type="Node"]
script = SubResource("GDScript_l7bq3")

[node name="ServerListener" type="Node" parent="."]
script = ExtResource("1_2q5lg")

[connection signal="new_server" from="ServerListener" to="." method="_on_server_listener_new_server"]
[connection signal="server_decayed" from="ServerListener" to="." method="_on_server_listener_server_decayed"]
